from aiogram import Router
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from .addresses import ChooseAddress
from keyboards.reply import main_menu
from keyboards.reply.main_menu import address_menu, leisure_menu

router = Router()


@router.message(Command(commands=["start"]))
@router.message(Text(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å", ignore_case=True))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º,—á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!–Ω–∞–¥–µ–µ–º—Å—è,—á—Ç–æ –≤–∞—à–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ –Ω–∞—à–∏—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞—Ö –ø—Ä–æ–π–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–ª—è –≤–∞—Å üß°\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=address_menu,
    )
    await state.set_state(ChooseAddress.choosing_address)


@router.message(Command(commands=["back"]))
@router.message(Text(text="–Ω–∞–∑–∞–¥", ignore_case=True))
async def cmd_back(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö FSMContext
    current_state = await state.get_state()

    if current_state == "ChooseAddress:choosing_questions":
        await state.set_state(ChooseAddress.choosing_address)
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=address_menu)

    elif current_state in [
        "ChooseAddress:leisure",
        "ChooseAddress:other",
        "ChooseAddress:flat",
    ]:
        await state.set_state(ChooseAddress.choosing_questions)
        await message.answer(
            text="–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
            reply_markup=main_menu,
        )
    elif current_state in ["ChooseAddress:place", "ChooseAddress:food"]:
        await state.set_state(ChooseAddress.leisure)
        await message.answer(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–æ—Å—É–≥, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=leisure_menu,
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.", reply_markup=address_menu)
